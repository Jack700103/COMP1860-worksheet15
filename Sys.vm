//// COMPUTE THE BITWISE EXCLUSIVE OR.
// This function takes two arguments and pushes the exclusive
// OR of its bits onto the stack. This function implements the
// formula:
//    x XOR y = (x AND (NOT y)) OR ((NOT x) and y)
// To call this function, you should:
//   1. push the two arguments onto the stack; and
//   2. call this function with `call Sys.xor 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
// Sys.xor function
function Sys.xor 2
    @SP
    AM=M-1
    D=M
    @R13
    M=D  

    @SP
    AM=M-1
    D=M
    @R14
    M=D  

    @R14
    D=!M
    @R15
    M=D  
    @R13
    D=M
    @R15
    D=D&M
    @temp1
    M=D  

    @R13
    D=!M
    @R16
    M=D  
    @R14
    D=M
    @R16
    D=D&M
    @temp2
    M=D  


    @temp1
    D=M
    @temp2
    D=D|M

    @SP
    A=M
    M=D
    @SP
    M=M+1

    @LCL
    D=M
    @R13
    M=D 

    @5
    A=D-A
    D=M
    @R14
    M=D  

    @ARG
    D=M
    @SP
    M=D+1  

    @R13
    D=M
    @1
    D=D-A
    A=D
    D=M
    @THAT
    M=D 

    @R13
    D=M
    @2
    D=D-A
    A=D
    D=M
    @THIS
    M=D  

    @R13
    D=M
    @3
    D=D-A
    A=D
    D=M
    @ARG
    M=D 

    @R13
    D=M
    @4
    D=D-A
    A=D
    D=M
    @LCL
    M=D 

    @R14
    A=M
    0;JMP 
    return



//// SHIFT A VALUE LEFT BY REPEATED ADDITION.
// This function takes two arguments and pushes the first argument
// shifted left by as many position as indicated by the second
// argument. To call this function, you should:
//   1. push the two arguments (number to be shifted and number of
//      shift positions) onto the stack; and
//   2. call this function with `call Sys.shiftLeft 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
// Sys.shiftLeft function
function Sys.shiftLeft 2
    @SP
    AM=M-1
    D=M
    @y
    M=D

    @SP
    AM=M-1
    D=M
    @x
    M=D

    @x
    D=M
    @result
    M=D

    @0
    D=A
    @counter
    M=D

(SHIFT_LOOP)
    @counter
    D=M
    @y
    D=D-M
    @END_SHIFT
    D;JGE  

    @result
    M=M+M

    @counter
    M=M+1
    @SHIFT_LOOP
    0;JMP

(END_SHIFT)
    @result
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1

    @LCL
    D=M
    @R13
    M=D  

    @5
    A=D-A
    D=M
    @R14
    M=D 

    @ARG
    D=M
    @SP
    M=D+1 

    @R13
    D=M
    @1
    D=D-A
    A=D
    D=M
    @THAT
    M=D 

    @R13
    D=M
    @2
    D=D-A
    A=D
    D=M
    @THIS
    M=D 

    @R13
    D=M
    @3
    D=D-A
    A=D
    D=M
    @ARG
    M=D  

    @R13
    D=M
    @4
    D=D-A
    A=D
    D=M
    @LCL
    M=D 

    @R14
    A=M
    0;JMP 
    return



//// COMPUTE THE PARITY OF THE BOTTOM 15 BITS OF AN INTEGER.
// This function takes one arguments and pushes the parity of
// the fifteen right-most bits onto the stack. The possible output
// values are 1, if the number of 1s in the right-most fifteen
// bits is odd, or 0, if the number of 1s in the right-most
// fifteen bits is even. Here is some example output:
//
//     INPUT (binary)  | OUT |         NOTES
//    -----------------+-----+-----------------------
//    1000000000000000 |  0  | Left-most bit ignored.
//    0000000000000001 |  1  |
//    1000000000000001 |  1  | Left-most bit ignored.
//    0111111111011111 |  0  |
//    0111111111111111 |  1  |
//    1111111111111111 |  1  | Left-most bit ignored.
//
// To call this function, you should:
//   1. push the argument onto the stack; and
//   2. call this function with `call Sys.computeParity 1`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.computeParity 2
// Sys.computeParity function
    @0
    D=A
    @parityBit
    M=D

    @0
    D=A
    @i
    M=D
(LOOP)
    @i
    D=M
    @15
    D=D-A
    @END_LOOP
    D;JGE  

    @i
    D=M
    @bitmask
    M=1
    @SHIFT_LEFT_LOOP
    0;JMP
(SHIFT_LEFT_LOOP)
    @bitmask
    D=M
    @i
    D=D<<M
    @bitmask
    M=D
    @CHECK_BIT
    0;JMP
(CHECK_BIT)
    @SP
    A=M-1
    D=M
    @inputValue
    M=D

    @bitmask
    D=M
    @inputValue
    D=D&M
    @UPDATE_PARITY
    D;JNE  
    @INCREMENT_I
    0;JMP
(UPDATE_PARITY)
    @parityBit
    M=!M
    @INCREMENT_I
    0;JMP
(INCREMENT_I)
    @i
    M=M+1
    @LOOP
    0;JMP
(END_LOOP)
    @parityBit
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1

    @LCL
    D=M
    @R13
    M=D  

    @5
    A=D-A
    D=M
    @R14
    M=D  

    @ARG
    D=M
    @SP
    M=D+1  

    @R13
    D=M
    @1
    D=D-A
    A=D
    D=M
    @THAT
    M=D  

    @R13
    D=M
    @2
    D=D-A
    A=D
    D=M
    @THIS
    M=D  

    @R13
    D=M
    @3
    D=D-A
    A=D
    D=M
    @ARG
    M=D 

    @R13
    D=M
    @4
    D=D-A
    A=D
    D=M
    @LCL
    M=D  

    @R14
    A=M
    0;JMP  
    return


//// SET LEFT-MOST BIT TO PARITY BIT.
// This function takes one 16-bit string and pushes onto the stack
// the same bit string with the left-most bit set to the parity
// bit of the 15 right-most bits. Here is some example output:
//
//     INPUT (binary)  | OUTPUT (binary)  |         NOTES
//    -----------------+------------------+-----------------------
//    1000000000000000 | 0000000000000000 | Left-most bit ignored.
//    0000000000000001 | 1000000000000001 |
//    1000000000000001 | 1000000000000001 | Left-most bit ignored.
//    0111111111011111 | 0111111111011111 |
//    0111111111111111 | 1111111111111111 |
//    1111111111111111 | 1111111111111111 | Left-most bit ignored.
//
// To call this function, you should:
//   1. push the the argument onto the stack; and
//   2. call this function with `call Sys.encode 1`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.encode 0
// Sys.encode function
    @SP
    AM=M-1
    D=M
    @inputValue
    M=D

    @5
    A=D-A
    D=M
    @returnAddress
    M=D

    @inputValue
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @Sys.computeParity
    0;JMP
(RETURN_FROM_COMPUTE_PARITY)
    @SP
    AM=M-1
    D=M
    @parityBit
    M=D

    @parityBit
    D=M
    @SET_MOST_SIGNIFICANT_BIT
    D;JEQ  
    @PUSH_RESULT
    0;JMP
(SET_MOST_SIGNIFICANT_BIT)
    @inputValue
    D=M
    @bitmask
    M=1
    @15
    D=A
(SHIFT_LEFT_FOR_MASK)
    @bitmask
    D=M
    D=D<<1
    @bitmask
    M=D
    @14
    D=D-A
    @SHIFT_LEFT_FOR_MASK
    D;JGT
    @inputValue
    D=D|bitmask
    @PUSH_RESULT
    0;JMP
(PUSH_RESULT)
    @inputValue
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1

    @returnAddress
    A=M
    0;JMP
    return



// The emulator will start executing from here. You can modify
// the code below while testing and debugging your code, but
// please revert your changes before submitting to Gradescope;
// otherwise, your submission will most likely fail all tests.
//
// A better way to test your code is to use the supplied file
//   Sys.tst
// with the virtual machine emulator. Please do not submit this
// file to Gradescope, as this will cause your submission to be
// rejected.
//
function Sys.init 0
    call Sys.encode 1

label WHILE
    goto WHILE